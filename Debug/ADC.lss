
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001093  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ac  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000981  00000000  00000000  00001e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00002820  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000482  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000094f  00000000  00000000  00002eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003805  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9b 01 	call	0x336	; 0x336 <main>
  64:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_INIT>:

void ADC_INIT(void)
{
	#if ADC_VOLTAGE_REFERENCE    ==   ADC_VREF_VCC
	{
	   SET_BIT(ADMUX,6);
  6c:	3e 9a       	sbi	0x07, 6	; 7
	   CLR_BIT(ADMUX,7);
  6e:	3f 98       	cbi	0x07, 7	; 7
	}
	#endif
	
	#if ADC_ADJUST_DEFINE    ==     ADC_RIGHT_ADJUST
	{
		CLR_BIT(ADMUX,5);
  70:	3d 98       	cbi	0x07, 5	; 7
		CLR_BIT(ADMUX,3);
		CLR_BIT(ADMUX,4);
	}
	#elif ADC_CHANNEL_DEFINE   ==     ADC_CHANNEL_1
	{
		SET_BIT(ADMUX,0);
  72:	38 9a       	sbi	0x07, 0	; 7
		CLR_BIT(ADMUX,1);
  74:	39 98       	cbi	0x07, 1	; 7
		CLR_BIT(ADMUX,2);
  76:	3a 98       	cbi	0x07, 2	; 7
		CLR_BIT(ADMUX,3);
  78:	3b 98       	cbi	0x07, 3	; 7
		CLR_BIT(ADMUX,4);
  7a:	3c 98       	cbi	0x07, 4	; 7
		SET_BIT(ADCSRA,1);
		SET_BIT(ADCSRA,2);
	}
	#elif ADC_PRESC_DEFINE      ==     ADC_PRESC_128
	{
		SET_BIT(ADCSRA,0);
  7c:	30 9a       	sbi	0x06, 0	; 6
		SET_BIT(ADCSRA,1);
  7e:	31 9a       	sbi	0x06, 1	; 6
		SET_BIT(ADCSRA,2);
  80:	32 9a       	sbi	0x06, 2	; 6
	}
	#endif
	
	#if    ADC_INTERRUPT_DEFINE   ==    ADC_INTERRUPT_DISABLE
	{
		CLR_BIT(ADCSRA,3);
  82:	33 98       	cbi	0x06, 3	; 6
	}
	#endif
	
	#if ADC_TRIGGER_DEFINE     ==     ADC_AUTO_TRIGGER
	{
		SET_BIT(ADCSRA,5);
  84:	35 9a       	sbi	0x06, 5	; 6
	}
	#endif
	
	#if ADC_AUTO_TRIGGER_SOURCE  ==  ADC_FREE_RUNNING_MODE
	{
		CLR_BIT(SFIOR,5);
  86:	80 b7       	in	r24, 0x30	; 48
  88:	8f 7d       	andi	r24, 0xDF	; 223
  8a:	80 bf       	out	0x30, r24	; 48
		CLR_BIT(SFIOR,6);
  8c:	80 b7       	in	r24, 0x30	; 48
  8e:	8f 7b       	andi	r24, 0xBF	; 191
  90:	80 bf       	out	0x30, r24	; 48
		CLR_BIT(SFIOR,7);
  92:	80 b7       	in	r24, 0x30	; 48
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	80 bf       	out	0x30, r24	; 48
	}
	#endif
	
	#if ADC_STATUS         ==          ADC_ENABLE
	{
		SET_BIT(ADCSRA,7);
  98:	37 9a       	sbi	0x06, 7	; 6
  9a:	08 95       	ret

0000009c <ADC_READ>:
	}
	#endif
	
}
void ADC_READ (uint16* read)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	ec 01       	movw	r28, r24
	ADC_INIT();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_INIT>
	SET_BIT(ADCSRA,6);
  a6:	36 9a       	sbi	0x06, 6	; 6
	
	#if ADC_INTERRUPT_DEFINE    ==    ADC_INTERRUPT_DISABLE
	{
		#if ADC_ADJUST_DEFINE    ==     ADC_RIGHT_ADJUST
		{
		   while(!GET_BIT(ADCSRA,4));
  a8:	34 9b       	sbis	0x06, 4	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <ADC_READ+0xc>
		   *read = ADC_ADJUST;
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	95 b1       	in	r25, 0x05	; 5
  b0:	99 83       	std	Y+1, r25	; 0x01
  b2:	88 83       	st	Y, r24
			*read=((ADCH<<2)||(ADCL>>6));
		}
		#endif
	}
	#endif
}
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
  ba:	44 23       	and	r20, r20
  bc:	b9 f1       	breq	.+110    	; 0x12c <DIO_WritePin+0x72>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	09 f0       	breq	.+2      	; 0xc4 <DIO_WritePin+0xa>
  c2:	6b c0       	rjmp	.+214    	; 0x19a <DIO_WritePin+0xe0>


	case DIO_PIN_HIGH :


		switch (Port)
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	89 f0       	breq	.+34     	; 0xea <DIO_WritePin+0x30>
  c8:	28 f0       	brcs	.+10     	; 0xd4 <DIO_WritePin+0x1a>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	c9 f0       	breq	.+50     	; 0x100 <DIO_WritePin+0x46>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	11 f1       	breq	.+68     	; 0x116 <DIO_WritePin+0x5c>
  d2:	08 95       	ret
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
  d4:	2b b3       	in	r18, 0x1b	; 27
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_WritePin+0x26>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_WritePin+0x22>
  e4:	82 2b       	or	r24, r18
  e6:	8b bb       	out	0x1b, r24	; 27

			break;
  e8:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
  ea:	28 b3       	in	r18, 0x18	; 24
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_WritePin+0x3c>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_WritePin+0x38>
  fa:	82 2b       	or	r24, r18
  fc:	88 bb       	out	0x18, r24	; 24

			break;
  fe:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 100:	25 b3       	in	r18, 0x15	; 21
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_WritePin+0x52>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_WritePin+0x4e>
 110:	82 2b       	or	r24, r18
 112:	85 bb       	out	0x15, r24	; 21

			break;
 114:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 116:	22 b3       	in	r18, 0x12	; 18
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_WritePin+0x68>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_WritePin+0x64>
 126:	82 2b       	or	r24, r18
 128:	82 bb       	out	0x12, r24	; 18

			break;
 12a:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	91 f0       	breq	.+36     	; 0x154 <DIO_WritePin+0x9a>
 130:	28 f0       	brcs	.+10     	; 0x13c <DIO_WritePin+0x82>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	d9 f0       	breq	.+54     	; 0x16c <DIO_WritePin+0xb2>
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	29 f1       	breq	.+74     	; 0x184 <DIO_WritePin+0xca>
 13a:	08 95       	ret
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 13c:	2b b3       	in	r18, 0x1b	; 27
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_WritePin+0x8e>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_WritePin+0x8a>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	8b bb       	out	0x1b, r24	; 27

				break;
 152:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 154:	28 b3       	in	r18, 0x18	; 24
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_WritePin+0xa6>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_WritePin+0xa2>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	88 bb       	out	0x18, r24	; 24

				break;
 16a:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 16c:	25 b3       	in	r18, 0x15	; 21
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WritePin+0xbe>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WritePin+0xba>
 17c:	80 95       	com	r24
 17e:	82 23       	and	r24, r18
 180:	85 bb       	out	0x15, r24	; 21

				break;
 182:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 184:	22 b3       	in	r18, 0x12	; 18
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_WritePin+0xd6>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_WritePin+0xd2>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	82 bb       	out	0x12, r24	; 18
 19a:	08 95       	ret

0000019c <LCD_WriteChar>:
{
	uint8 pos[2] = {0x80 , 0xC0};
		
	LCD_WriteCommand(pos[row]+col);
		
}
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 5d 00 	call	0xba	; 0xba <DIO_WritePin>
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 5d 00 	call	0xba	; 0xba <DIO_WritePin>
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	63 e0       	ldi	r22, 0x03	; 3
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 5d 00 	call	0xba	; 0xba <DIO_WritePin>
 1be:	8c 2f       	mov	r24, r28
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	8b bb       	out	0x1b, r24	; 27
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	63 e0       	ldi	r22, 0x03	; 3
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 5d 00 	call	0xba	; 0xba <DIO_WritePin>
 1ce:	8f e9       	ldi	r24, 0x9F	; 159
 1d0:	9f e0       	ldi	r25, 0x0F	; 15
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_WriteChar+0x36>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_WriteChar+0x3c>
 1d8:	00 00       	nop
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	63 e0       	ldi	r22, 0x03	; 3
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 5d 00 	call	0xba	; 0xba <DIO_WritePin>
 1e4:	c2 95       	swap	r28
 1e6:	c0 7f       	andi	r28, 0xF0	; 240
 1e8:	cb bb       	out	0x1b, r28	; 27
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 5d 00 	call	0xba	; 0xba <DIO_WritePin>
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_WriteChar+0x5c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_WriteChar+0x62>
 1fe:	00 00       	nop
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	63 e0       	ldi	r22, 0x03	; 3
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 5d 00 	call	0xba	; 0xba <DIO_WritePin>
 20a:	8f e1       	ldi	r24, 0x1F	; 31
 20c:	9e e4       	ldi	r25, 0x4E	; 78
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_WriteChar+0x72>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_WriteChar+0x78>
 214:	00 00       	nop
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <LCD_WriteInteger>:

void LCD_WriteInteger(uint32 int_num)
{
 21a:	8f 92       	push	r8
 21c:	9f 92       	push	r9
 21e:	af 92       	push	r10
 220:	bf 92       	push	r11
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	8b 01       	movw	r16, r22
 230:	9c 01       	movw	r18, r24
	uint32 temp =1;
	while (int_num)
 232:	67 2b       	or	r22, r23
 234:	68 2b       	or	r22, r24
 236:	69 2b       	or	r22, r25
 238:	09 f4       	brne	.+2      	; 0x23c <LCD_WriteInteger+0x22>
 23a:	53 c0       	rjmp	.+166    	; 0x2e2 <LCD_WriteInteger+0xc8>
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp=(temp*10)+(int_num %10);
 244:	0f 2e       	mov	r0, r31
 246:	fa e0       	ldi	r31, 0x0A	; 10
 248:	8f 2e       	mov	r8, r31
 24a:	91 2c       	mov	r9, r1
 24c:	a1 2c       	mov	r10, r1
 24e:	b1 2c       	mov	r11, r1
 250:	f0 2d       	mov	r31, r0
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	6c 01       	movw	r12, r24
 260:	7d 01       	movw	r14, r26
 262:	cc 0c       	add	r12, r12
 264:	dd 1c       	adc	r13, r13
 266:	ee 1c       	adc	r14, r14
 268:	ff 1c       	adc	r15, r15
 26a:	cc 0c       	add	r12, r12
 26c:	dd 1c       	adc	r13, r13
 26e:	ee 1c       	adc	r14, r14
 270:	ff 1c       	adc	r15, r15
 272:	c8 0e       	add	r12, r24
 274:	d9 1e       	adc	r13, r25
 276:	ea 1e       	adc	r14, r26
 278:	fb 1e       	adc	r15, r27
 27a:	c9 01       	movw	r24, r18
 27c:	b8 01       	movw	r22, r16
 27e:	a5 01       	movw	r20, r10
 280:	94 01       	movw	r18, r8
 282:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodsi4>
 286:	6c 0d       	add	r22, r12
 288:	7d 1d       	adc	r23, r13
 28a:	8e 1d       	adc	r24, r14
 28c:	9f 1d       	adc	r25, r15
		int_num/=10;
 28e:	02 2f       	mov	r16, r18
 290:	13 2f       	mov	r17, r19
 292:	24 2f       	mov	r18, r20
 294:	35 2f       	mov	r19, r21
}

void LCD_WriteInteger(uint32 int_num)
{
	uint32 temp =1;
	while (int_num)
 296:	01 15       	cp	r16, r1
 298:	11 05       	cpc	r17, r1
 29a:	21 05       	cpc	r18, r1
 29c:	31 05       	cpc	r19, r1
 29e:	c9 f6       	brne	.-78     	; 0x252 <LCD_WriteInteger+0x38>
	{
		temp=(temp*10)+(int_num %10);
		int_num/=10;
	}
	while(temp>1)
 2a0:	62 30       	cpi	r22, 0x02	; 2
 2a2:	71 05       	cpc	r23, r1
 2a4:	81 05       	cpc	r24, r1
 2a6:	91 05       	cpc	r25, r1
 2a8:	e0 f0       	brcs	.+56     	; 0x2e2 <LCD_WriteInteger+0xc8>
	{
		LCD_WriteChar((temp%10)+48);
 2aa:	0f 2e       	mov	r0, r31
 2ac:	fa e0       	ldi	r31, 0x0A	; 10
 2ae:	8f 2e       	mov	r8, r31
 2b0:	91 2c       	mov	r9, r1
 2b2:	a1 2c       	mov	r10, r1
 2b4:	b1 2c       	mov	r11, r1
 2b6:	f0 2d       	mov	r31, r0
 2b8:	a5 01       	movw	r20, r10
 2ba:	94 01       	movw	r18, r8
 2bc:	0e 94 a3 01 	call	0x346	; 0x346 <__udivmodsi4>
 2c0:	e2 2e       	mov	r14, r18
 2c2:	f3 2e       	mov	r15, r19
 2c4:	04 2f       	mov	r16, r20
 2c6:	15 2f       	mov	r17, r21
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	86 0f       	add	r24, r22
 2cc:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_WriteChar>
		temp/=10;
 2d0:	6e 2d       	mov	r22, r14
 2d2:	7f 2d       	mov	r23, r15
 2d4:	80 2f       	mov	r24, r16
 2d6:	91 2f       	mov	r25, r17
	while (int_num)
	{
		temp=(temp*10)+(int_num %10);
		int_num/=10;
	}
	while(temp>1)
 2d8:	62 30       	cpi	r22, 0x02	; 2
 2da:	71 05       	cpc	r23, r1
 2dc:	81 05       	cpc	r24, r1
 2de:	91 05       	cpc	r25, r1
 2e0:	58 f7       	brcc	.-42     	; 0x2b8 <LCD_WriteInteger+0x9e>
	{
		LCD_WriteChar((temp%10)+48);
		temp/=10;
	}
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	df 90       	pop	r13
 2ec:	cf 90       	pop	r12
 2ee:	bf 90       	pop	r11
 2f0:	af 90       	pop	r10
 2f2:	9f 90       	pop	r9
 2f4:	8f 90       	pop	r8
 2f6:	08 95       	ret

000002f8 <LM_35_read>:
#include "LM_35.h"
uint16 LM_35_read(void)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <LM_35_read+0x6>
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
	uint16 digital=0;
 302:	1a 82       	std	Y+2, r1	; 0x02
 304:	19 82       	std	Y+1, r1	; 0x01
	uint8 temp=0;
	
	ADC_READ ( & digital);
 306:	ce 01       	movw	r24, r28
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_READ>
 30e:	49 81       	ldd	r20, Y+1	; 0x01
 310:	5a 81       	ldd	r21, Y+2	; 0x02
 312:	24 ef       	ldi	r18, 0xF4	; 244
 314:	31 e0       	ldi	r19, 0x01	; 1
 316:	42 9f       	mul	r20, r18
 318:	c0 01       	movw	r24, r0
 31a:	43 9f       	mul	r20, r19
 31c:	90 0d       	add	r25, r0
 31e:	52 9f       	mul	r21, r18
 320:	90 0d       	add	r25, r0
 322:	11 24       	eor	r1, r1
	 temp=(500*digital)/1024;
	 return temp;
}
 324:	89 2f       	mov	r24, r25
 326:	99 27       	eor	r25, r25
 328:	86 95       	lsr	r24
 32a:	86 95       	lsr	r24
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <main>:
int main(void)
{
    uint16 temp=0;
    while (1) 
    {
		temp=LM_35_read();
 336:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LM_35_read>
		LCD_WriteInteger(temp);
 33a:	bc 01       	movw	r22, r24
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_WriteInteger>
 344:	f8 cf       	rjmp	.-16     	; 0x336 <main>

00000346 <__udivmodsi4>:
 346:	a1 e2       	ldi	r26, 0x21	; 33
 348:	1a 2e       	mov	r1, r26
 34a:	aa 1b       	sub	r26, r26
 34c:	bb 1b       	sub	r27, r27
 34e:	fd 01       	movw	r30, r26
 350:	0d c0       	rjmp	.+26     	; 0x36c <__udivmodsi4_ep>

00000352 <__udivmodsi4_loop>:
 352:	aa 1f       	adc	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	ee 1f       	adc	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	a2 17       	cp	r26, r18
 35c:	b3 07       	cpc	r27, r19
 35e:	e4 07       	cpc	r30, r20
 360:	f5 07       	cpc	r31, r21
 362:	20 f0       	brcs	.+8      	; 0x36c <__udivmodsi4_ep>
 364:	a2 1b       	sub	r26, r18
 366:	b3 0b       	sbc	r27, r19
 368:	e4 0b       	sbc	r30, r20
 36a:	f5 0b       	sbc	r31, r21

0000036c <__udivmodsi4_ep>:
 36c:	66 1f       	adc	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	1a 94       	dec	r1
 376:	69 f7       	brne	.-38     	; 0x352 <__udivmodsi4_loop>
 378:	60 95       	com	r22
 37a:	70 95       	com	r23
 37c:	80 95       	com	r24
 37e:	90 95       	com	r25
 380:	9b 01       	movw	r18, r22
 382:	ac 01       	movw	r20, r24
 384:	bd 01       	movw	r22, r26
 386:	cf 01       	movw	r24, r30
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
